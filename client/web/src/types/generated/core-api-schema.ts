/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account information
         * @description Retrieve the logged-in user's account information
         */
        get: operations["d334e9598af008f9fe0254101aefedbf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/account/update-information": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update account information
         * @description Update the user's account information
         */
        post: operations["b38a24b1c687615ca12ece70d3e22112"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/account/update-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update user password
         * @description Update the user's password
         */
        post: operations["09834cfd0537024793a8bc776c30c1dc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/account/update-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update user email
         * @description Update the user's email address
         */
        post: operations["a10632a3ed23c713b7488c28f913d461"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/email/resend-verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User resend email verification
         * @description Send user an email verification
         */
        post: operations["4f8ba7cc827f60c15406fea460ab605f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User sign-up
         * @description Sign up a new user
         */
        post: operations["a9a9772f77ea214ed228f499a12b0011"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User sign-in
         * @description Sign in a user
         */
        post: operations["dc69729f6544b97e7dbd4464e60872f8"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/sign-out": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign out a user
         * @description Signs out the authenticated user by invalidating their token.
         */
        post: operations["82d9e7e245409adfbfa784a3c59bbc4f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/send-reset-password-confirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User send reset password confirmation
         * @description Sends a password reset email confirmation to the user
         */
        post: operations["15799788afafcbe802fbe7f0cab57fc3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User reset password
         * @description Resets a user's password
         */
        post: operations["6af92e090f994419a2295111b391a205"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/emotions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of emotions
         * @description Returns a list of all emotions
         */
        get: operations["455bb6df3ff93f3edb1175b85541440b"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/emotions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a emotion by its ID
         * @description Get a emotion data
         */
        get: operations["3ab41c6289d494db4b2c8eb6b5c3079f"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/post-analytics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a post analytic by its ID
         * @description Get a post analytic along with its sentiment and emotion data
         */
        get: operations["3e3482e3fc8d9ee1b754d3fc8155742e"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new post
         * @description Stores a newly created post
         */
        post: operations["7a929de584eeb58f61028284e29b6db0"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a post by its ID
         * @description Get a post along with its analytics, sentiment, and emotion data
         */
        get: operations["a20e68b2cffe1d2b08b731b2b8b757e4"];
        put?: never;
        post?: never;
        /**
         * Delete a post by its ID
         * @description Deletes a post and returns its analytics before deletion
         */
        delete: operations["73d72b038667e11235a42feffa036338"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/by-thread-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve posts by thread ID
         * @description Get all posts associated with a given thread ID along with analytics, sentiment, and emotion data
         */
        post: operations["5b89225848f03c92bb956d0a9bb8c9d2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sentiments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of sentiments
         * @description Returns a list of all sentiments
         */
        get: operations["aeed5bf24e5d1eed01ba5131fd41c5f4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sentiments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a sentiment by its ID
         * @description Get a sentiment data
         */
        get: operations["84b61ed01a3ab798429918a64fe8c23a"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/thread-analytics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a thread analytic by its ID
         * @description Get a thread analytic along with its analytics, sentiment, and emotion data
         */
        get: operations["c0e8b082b5dd700a463c4e979fa31f8c"];
        put?: never;
        post?: never;
        /**
         * Delete a thread analytic by its ID
         * @description Deletes a thread analytic and returns its analytics before deletion
         */
        delete: operations["7761efe5000198622314b9d5dc0e08fd"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{id}/thread-analytics/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a thread analytic metrics by thread ID
         * @description Retrieves a thread analytic metrics
         */
        get: operations["bbd6105e43170ad94ca3e63d2da8981d"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of threads
         * @description Returns a list of all threads
         */
        get: operations["87dfdfff587b74f22cfa8d2019c3683e"];
        put?: never;
        /**
         * Create a new thread
         * @description Stores a newly created thread
         */
        post: operations["7419cf3a50e91cc39aa363cc1c92ad06"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a thread by its ID
         * @description Get a thread along with its analytics
         */
        get: operations["b4cfc426c8d8cd9670e69045d4e8ece1"];
        /**
         * Update a thread by its ID
         * @description Updates the specified thread with new data
         */
        put: operations["2a03bbf5f007bf160a7d44a03dcdb0f5"];
        post?: never;
        /**
         * Delete a thread by its ID
         * @description Deletes a thread and returns its data before deletion
         */
        delete: operations["3fec24393d77b4cb096805ee59316707"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/thread-summaries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a thread summary by its ID
         * @description Get a thread summary along with its analytics, sentiment, and emotion data
         */
        get: operations["b0f5c4623507bfb0ece21ec67711b0e6"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdateEmailRequest: {
            /** @description The new email of the user */
            new_email: string;
            /** @description The password of the user */
            password: string;
        };
        UpdateInformationRequest: {
            /** @description The first name of the user */
            first_name: string;
            /** @description The last name of the user */
            last_name: string;
        };
        UpdatePasswordRequest: {
            /** @description The current password of the user */
            current_password: string;
            /** @description The new password of the user */
            new_password: string;
        };
        ResetPasswordRequest: {
            /**
             * Format: email
             * @description User's email address
             */
            email: string;
            /** @description Password reset token */
            token: string;
            /** @description New password */
            password: string;
        };
        ResetPasswordResponse: {
            ""?: components["schemas"]["User"];
        };
        SendResetPasswordConfirmationRequest: {
            /**
             * Format: email
             * @description The email of the user
             */
            email: string;
        };
        SendResetPasswordConfirmationResponse: {
            ""?: components["schemas"]["User"];
        };
        SignInRequest: {
            /**
             * Format: email
             * @description The email of the user
             */
            email: string;
            /** @description The password of the user */
            password: string;
        };
        SignInResponse: {
            /** @description Success message */
            message: string;
            user: components["schemas"]["User"];
            /** @description The authentication token for the user */
            token: string;
        };
        SignOutResponse: {
            ""?: components["schemas"]["User"];
        };
        SignUpRequest: {
            /** @description The first name of the user */
            first_name: string;
            /** @description The last name of the user */
            last_name: string;
            /**
             * Format: email
             * @description The email of the user
             */
            email: string;
            /** @description The password of the user */
            password: string;
            /** @description Confirmation of the user's password */
            password_confirmation: string;
        };
        SignUpResponse: {
            /** @description Success message */
            message: string;
            user: components["schemas"]["User"];
            /** @description The authentication token for the user */
            token: string;
        };
        /** Emotion */
        Emotion: {
            /** Format: int64 */
            id: number;
            class: string;
            description: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        GetPostsByThreadIdRequest: {
            /** @description The unique identifier of the associated thread */
            thread_id: number;
        };
        /** Post */
        Post: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            thread_id: number;
            content: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            thread?: components["schemas"]["Thread"];
            post_analytic?: components["schemas"]["PostAnalytic"];
        };
        /** Post Analytic */
        PostAnalytic: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            post_id: number;
            /** Format: int64 */
            post_predicted_sentiment_id: number;
            /** Format: int64 */
            post_predicted_emotion_id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            post?: components["schemas"]["Post"];
            post_predicted_sentiment?: components["schemas"]["PostPredictedSentiment"];
            post_predicted_emotion?: components["schemas"]["PostPredictedEmotion"];
        };
        /** Post Predicted Emotion */
        PostPredictedEmotion: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            emotion_id: number;
            /** Format: float */
            probability: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            emotion?: components["schemas"]["Emotion"];
        };
        /** Post Predicted Sentiment */
        PostPredictedSentiment: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            sentiment_id: number;
            /** Format: float */
            probability: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            sentiment?: components["schemas"]["Sentiment"];
        };
        StorePostRequest: {
            /** @description The unique identifier of the associated thread */
            thread_id: number;
            /** @description The content of the post */
            content: string;
        };
        /** Sentiment */
        Sentiment: {
            /** Format: int64 */
            id: number;
            class: string;
            description: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        GetThreadAnalyticMetricsResponse: {
            /**
             * @description Total number of responses in the thread
             * @example 15
             */
            total_response: number;
            /**
             * @description The key concept of the thread
             * @example Sustainability
             */
            key_concept: string;
            /**
             * @description Leading sentiment of the responses
             * @example positive
             */
            leading_sentiment: string;
            /**
             * @description Leading emotion in the responses
             * @example joy
             */
            leading_emotion: string;
            /**
             * @description Ratio of sentiments in the thread responses
             * @example {
             *       "positive": 0.6,
             *       "neutral": 0.3,
             *       "negative": 0.1
             *     }
             */
            sentiment_ratio: {
                /** Format: float */
                positive?: number;
                /** Format: float */
                neutral?: number;
                /** Format: float */
                negative?: number;
            };
        };
        StoreThreadRequest: {
            /** @description The question of the thread */
            question: string;
        };
        /** Thread */
        Thread: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            user_id: number;
            question: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** @description A list of posts in the thread */
            posts?: components["schemas"]["Post"][];
            thread_analytic?: components["schemas"]["ThreadAnalytic"];
        };
        /** Thread Analytic */
        ThreadAnalytic: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            thread_id: number;
            /** Format: int64 */
            thread_extracted_concept_group_id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            thread?: components["schemas"]["Thread"];
            thread_extracted_concept_group?: components["schemas"]["ThreadExtractedConceptGroup"];
        };
        /** Thread Extracted Concept */
        ThreadExtractedConcept: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            thread_extracted_concept_group_id: number;
            concept: string;
            /** Format: float */
            significance_score: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /** Thread Extracted Concept Group */
        ThreadExtractedConceptGroup: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** @description A list of extracted concepts for this group */
            thread_extracted_concepts?: components["schemas"]["ThreadExtractedConcept"][];
        };
        /** Thread Summary */
        ThreadSummary: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            thread_id: number;
            summary: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            thread?: components["schemas"]["Thread"];
        };
        UpdateThreadRequest: {
            /** @description The question of the thread */
            question: string;
        };
        User: {
            /** @description The unique identifier of the user */
            id: number;
            /** @description The first name of the user */
            first_name: string;
            /** @description The last name of the user */
            last_name: string;
            /**
             * Format: email
             * @description The email of the user
             */
            email: string;
            /**
             * Format: date-time
             * @description The timestamp when the user was last updated
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the user was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the user's email was verified
             */
            email_verified_at?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    d334e9598af008f9fe0254101aefedbf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of account information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized account */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    b38a24b1c687615ca12ece70d3e22112: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInformationRequest"];
            };
        };
        responses: {
            /** @description Account information updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized action */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "09834cfd0537024793a8bc776c30c1dc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordRequest"];
            };
        };
        responses: {
            /** @description Password updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Current password is incorrect or validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized action */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    a10632a3ed23c713b7488c28f913d461: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEmailRequest"];
            };
        };
        responses: {
            /** @description Email updated successfully, verification sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Check your email for verification */
                        message?: string;
                        user?: components["schemas"]["User"];
                    };
                };
            };
            /** @description Password is incorrect or validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized action */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "4f8ba7cc827f60c15406fea460ab605f": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User signed up successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            /** @description Validation errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    a9a9772f77ea214ed228f499a12b0011: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpRequest"];
            };
        };
        responses: {
            /** @description User signed up successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignUpResponse"];
                };
            };
            /** @description Validation errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dc69729f6544b97e7dbd4464e60872f8: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequest"];
            };
        };
        responses: {
            /** @description User signed in successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponse"];
                };
            };
            /** @description Validation errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "82d9e7e245409adfbfa784a3c59bbc4f": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User signed out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignOutResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Unauthenticated. */
                        message?: string;
                    };
                };
            };
        };
    };
    "15799788afafcbe802fbe7f0cab57fc3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendResetPasswordConfirmationRequest"];
            };
        };
        responses: {
            /** @description Password reset link sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendResetPasswordConfirmationResponse"];
                };
            };
            /** @description Validation errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "6af92e090f994419a2295111b391a205": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            /** @description Password reset link sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponse"];
                };
            };
            /** @description Validation errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "455bb6df3ff93f3edb1175b85541440b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of emotions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Emotion"][];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "3ab41c6289d494db4b2c8eb6b5c3079f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the emotion to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of the emotion */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Emotion"];
                };
            };
            /** @description Emotion not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "3e3482e3fc8d9ee1b754d3fc8155742e": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the post analytic to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of the post analytic */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostAnalytic"];
                };
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "7a929de584eeb58f61028284e29b6db0": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorePostRequest"];
            };
        };
        responses: {
            /** @description Post created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Failed to create post */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    a20e68b2cffe1d2b08b731b2b8b757e4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the post to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of the post and its analytics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "73d72b038667e11235a42feffa036338": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the post to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Unauthorized action */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "5b89225848f03c92bb956d0a9bb8c9d2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetPostsByThreadIdRequest"];
            };
        };
        responses: {
            /** @description Successful retrieval of posts for the specified thread */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"][];
                };
            };
            /** @description Thread or posts not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    aeed5bf24e5d1eed01ba5131fd41c5f4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of sentiments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sentiment"][];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "84b61ed01a3ab798429918a64fe8c23a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the sentiment to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of the sentiment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sentiment"];
                };
            };
            /** @description Sentiment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    c0e8b082b5dd700a463c4e979fa31f8c: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the thread analytic to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of the thread analytic and its analytics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadAnalytic"];
                };
            };
            /** @description Thread analytic not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "7761efe5000198622314b9d5dc0e08fd": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the thread analytic to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Thread analytic deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadAnalytic"];
                };
            };
            /** @description Unauthorized action */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Thread analytic not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bbd6105e43170ad94ca3e63d2da8981d: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the thread to retrieve analytic metrics on */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of a thread analytic metrics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetThreadAnalyticMetricsResponse"];
                };
            };
            /** @description Thread not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "87dfdfff587b74f22cfa8d2019c3683e": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of threads */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"][];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "7419cf3a50e91cc39aa363cc1c92ad06": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoreThreadRequest"];
            };
        };
        responses: {
            /** @description Thread created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Failed to create thread */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    b4cfc426c8d8cd9670e69045d4e8ece1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the thread to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of the thread and its analytics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Thread not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "2a03bbf5f007bf160a7d44a03dcdb0f5": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the thread to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateThreadRequest"];
            };
        };
        responses: {
            /** @description Thread updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Validation error or update failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized action */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Thread not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "3fec24393d77b4cb096805ee59316707": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the thread to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Thread deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Unauthorized action */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Thread not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    b0f5c4623507bfb0ece21ec67711b0e6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the thread summary to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of the thread summary and its analytics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadSummary"];
                };
            };
            /** @description Thread summary not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
