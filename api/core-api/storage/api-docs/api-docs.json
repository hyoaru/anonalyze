{
    "openapi": "3.0.0",
    "info": {
        "title": "Your API Title",
        "description": "API Description",
        "contact": {
            "name": "Your Name",
            "email": "your.email@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/account": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Get account information",
                "description": "Retrieve the logged-in user's account information",
                "operationId": "d334e9598af008f9fe0254101aefedbf",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of account information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized account"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/account/update-information": {
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Update account information",
                "description": "Update the user's account information",
                "operationId": "b38a24b1c687615ca12ece70d3e22112",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateInformationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Account information updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized action"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/account/update-password": {
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Update user password",
                "description": "Update the user's password",
                "operationId": "09834cfd0537024793a8bc776c30c1dc",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Current password is incorrect or validation error"
                    },
                    "401": {
                        "description": "Unauthorized action"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/account/update-email": {
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Update user email",
                "description": "Update the user's email address",
                "operationId": "a10632a3ed23c713b7488c28f913d461",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEmailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email updated successfully, verification sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Check your email for verification"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Password is incorrect or validation error"
                    },
                    "401": {
                        "description": "Unauthorized action"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/auth/email/resend-verification": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User resend email verification",
                "description": "Send user an email verification",
                "operationId": "4f8ba7cc827f60c15406fea460ab605f",
                "responses": {
                    "200": {
                        "description": "User signed up successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/auth/sign-up": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User sign-up",
                "description": "Sign up a new user",
                "operationId": "a9a9772f77ea214ed228f499a12b0011",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignUpRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User signed up successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SignUpResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/auth/sign-in": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User sign-in",
                "description": "Sign in a user",
                "operationId": "dc69729f6544b97e7dbd4464e60872f8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignInRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User signed in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SignInResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/auth/sign-out": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign out a user",
                "description": "Signs out the authenticated user by invalidating their token.",
                "operationId": "82d9e7e245409adfbfa784a3c59bbc4f",
                "responses": {
                    "200": {
                        "description": "User signed out successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SignOutResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/emotions": {
            "get": {
                "tags": [
                    "Emotions"
                ],
                "summary": "Get a list of emotions",
                "description": "Returns a list of all emotions",
                "operationId": "455bb6df3ff93f3edb1175b85541440b",
                "responses": {
                    "200": {
                        "description": "A list of emotions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Emotion"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/emotions/{id}": {
            "get": {
                "tags": [
                    "Emotions"
                ],
                "summary": "Retrieve a emotion by its ID",
                "description": "Get a emotion data",
                "operationId": "3ab41c6289d494db4b2c8eb6b5c3079f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the emotion to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the emotion",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Emotion"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Emotion not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/post-analytics/{id}": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "Retrieve a post analytic by its ID",
                "description": "Get a post analytic along with its sentiment and emotion data",
                "operationId": "3e3482e3fc8d9ee1b754d3fc8155742e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post analytic to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the post analytic",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostAnalytic"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/posts": {
            "post": {
                "tags": [
                    "Posts"
                ],
                "summary": "Create a new post",
                "description": "Stores a newly created post",
                "operationId": "7a929de584eeb58f61028284e29b6db0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorePostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create post"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/posts/{id}": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "Retrieve a post by its ID",
                "description": "Get a post along with its analytics, sentiment, and emotion data",
                "operationId": "a20e68b2cffe1d2b08b731b2b8b757e4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the post and its analytics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Posts"
                ],
                "summary": "Delete a post by its ID",
                "description": "Deletes a post and returns its analytics before deletion",
                "operationId": "73d72b038667e11235a42feffa036338",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized action"
                    },
                    "404": {
                        "description": "Post not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/sentiments": {
            "get": {
                "tags": [
                    "Sentiments"
                ],
                "summary": "Get a list of sentiments",
                "description": "Returns a list of all sentiments",
                "operationId": "aeed5bf24e5d1eed01ba5131fd41c5f4",
                "responses": {
                    "200": {
                        "description": "A list of sentiments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Sentiment"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/sentiments/{id}": {
            "get": {
                "tags": [
                    "Sentiments"
                ],
                "summary": "Retrieve a sentiment by its ID",
                "description": "Get a sentiment data",
                "operationId": "84b61ed01a3ab798429918a64fe8c23a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the sentiment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the sentiment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Sentiment"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Sentiment not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/thread-analytics/{id}": {
            "get": {
                "tags": [
                    "Thread-analytics"
                ],
                "summary": "Retrieve a thread analytic by its ID",
                "description": "Get a thread analytic along with its analytics, sentiment, and emotion data",
                "operationId": "c0e8b082b5dd700a463c4e979fa31f8c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the thread analytic to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the thread analytic and its analytics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadAnalytic"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Thread analytic not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Thread analytics"
                ],
                "summary": "Delete a thread analytic by its ID",
                "description": "Deletes a thread analytic and returns its analytics before deletion",
                "operationId": "7761efe5000198622314b9d5dc0e08fd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the thread analytic to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread analytic deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadAnalytic"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized action"
                    },
                    "404": {
                        "description": "Thread analytic not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/threads": {
            "get": {
                "tags": [
                    "Threads"
                ],
                "summary": "Get a list of threads",
                "description": "Returns a list of all threads",
                "operationId": "87dfdfff587b74f22cfa8d2019c3683e",
                "responses": {
                    "200": {
                        "description": "A list of threads",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Thread"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Threads"
                ],
                "summary": "Create a new thread",
                "description": "Stores a newly created thread",
                "operationId": "7419cf3a50e91cc39aa363cc1c92ad06",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreThreadRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Thread created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Thread"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create thread"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/threads/{id}": {
            "get": {
                "tags": [
                    "Threads"
                ],
                "summary": "Retrieve a thread by its ID",
                "description": "Get a thread along with its analytics",
                "operationId": "b4cfc426c8d8cd9670e69045d4e8ece1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the thread to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the thread and its analytics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Thread"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Thread not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Threads"
                ],
                "summary": "Update a thread by its ID",
                "description": "Updates the specified thread with new data",
                "operationId": "2a03bbf5f007bf160a7d44a03dcdb0f5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the thread to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateThreadRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Thread updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Thread"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error or update failed"
                    },
                    "403": {
                        "description": "Unauthorized action"
                    },
                    "404": {
                        "description": "Thread not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Threads"
                ],
                "summary": "Delete a thread by its ID",
                "description": "Deletes a thread and returns its data before deletion",
                "operationId": "3fec24393d77b4cb096805ee59316707",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the thread to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Thread"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized action"
                    },
                    "404": {
                        "description": "Thread not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/thread-summaries/{id}": {
            "get": {
                "tags": [
                    "Thread summaries"
                ],
                "summary": "Retrieve a thread summary by its ID",
                "description": "Get a thread summary along with its analytics, sentiment, and emotion data",
                "operationId": "b0f5c4623507bfb0ece21ec67711b0e6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the thread summary to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the thread summary and its analytics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadSummary"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Thread summary not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "UpdateEmailRequest": {
                "required": [
                    "new_email",
                    "password"
                ],
                "properties": {
                    "new_email": {
                        "description": "The new email of the user",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password of the user",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateInformationRequest": {
                "required": [
                    "first_name",
                    "last_name"
                ],
                "properties": {
                    "first_name": {
                        "description": "The first name of the user",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdatePasswordRequest": {
                "required": [
                    "current_password",
                    "new_password"
                ],
                "properties": {
                    "current_password": {
                        "description": "The current password of the user",
                        "type": "string"
                    },
                    "new_password": {
                        "description": "The new password of the user",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignInRequest": {
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "description": "The email of the user",
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "description": "The password of the user",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignInResponse": {
                "properties": {
                    "message": {
                        "description": "Success message",
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "token": {
                        "description": "The authentication token for the user",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignOutResponse": {
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "SignUpRequest": {
                "required": [
                    "first_name",
                    "last_name",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "first_name": {
                        "description": "The first name of the user",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user",
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "description": "The password of the user",
                        "type": "string"
                    },
                    "password_confirmation": {
                        "description": "Confirmation of the user's password",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignUpResponse": {
                "properties": {
                    "message": {
                        "description": "Success message",
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "token": {
                        "description": "The authentication token for the user",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Emotion": {
                "title": "Emotion",
                "required": [
                    "id",
                    "class",
                    "description",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "class": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Post": {
                "title": "Post",
                "required": [
                    "id",
                    "thread_id",
                    "content",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "thread_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "content": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "thread": {
                        "$ref": "#/components/schemas/Thread"
                    },
                    "post_analytic": {
                        "$ref": "#/components/schemas/PostAnalytic"
                    }
                },
                "type": "object"
            },
            "PostAnalytic": {
                "title": "Post Analytic",
                "required": [
                    "id",
                    "post_id",
                    "post_predicted_sentiment_id",
                    "post_predicted_emotion_id",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "post_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "post_predicted_sentiment_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "post_predicted_emotion_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "post": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "post_predicted_sentiment": {
                        "$ref": "#/components/schemas/PostPredictedSentiment"
                    },
                    "post_predicted_emotion": {
                        "$ref": "#/components/schemas/PostPredictedEmotion"
                    }
                },
                "type": "object"
            },
            "PostPredictedEmotion": {
                "title": "Post Predicted Emotion",
                "required": [
                    "id",
                    "emotion_id",
                    "probability",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "emotion_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "probability": {
                        "type": "number",
                        "format": "float"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "emotion": {
                        "$ref": "#/components/schemas/Emotion"
                    }
                },
                "type": "object"
            },
            "PostPredictedSentiment": {
                "title": "Post Predicted Sentiment",
                "required": [
                    "id",
                    "sentiment_id",
                    "probability",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sentiment_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "probability": {
                        "type": "number",
                        "format": "float"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "sentiment": {
                        "$ref": "#/components/schemas/Sentiment"
                    }
                },
                "type": "object"
            },
            "StorePostRequest": {
                "required": [
                    "thread_id",
                    "content"
                ],
                "properties": {
                    "thread_id": {
                        "description": "The unique identifier of the associated thread",
                        "type": "integer"
                    },
                    "content": {
                        "description": "The content of the post",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Sentiment": {
                "title": "Sentiment",
                "required": [
                    "id",
                    "class",
                    "description",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "class": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "StoreThreadRequest": {
                "required": [
                    "question"
                ],
                "properties": {
                    "question": {
                        "description": "The question of the thread",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Thread": {
                "title": "Thread",
                "required": [
                    "id",
                    "user_id",
                    "question",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "question": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "posts": {
                        "description": "A list of posts in the thread",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    },
                    "thread_analytic": {
                        "$ref": "#/components/schemas/ThreadAnalytic"
                    }
                },
                "type": "object"
            },
            "ThreadAnalytic": {
                "title": "Thread Analytic",
                "required": [
                    "id",
                    "thread_id",
                    "thread_extracted_concept_group_id",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "thread_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "thread_extracted_concept_group_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "thread": {
                        "$ref": "#/components/schemas/Thread"
                    },
                    "thread_extracted_concept_group": {
                        "$ref": "#/components/schemas/ThreadExtractedConceptGroup"
                    }
                },
                "type": "object"
            },
            "ThreadExtractedConcept": {
                "title": "Thread Extracted Concept",
                "required": [
                    "id",
                    "thread_extracted_concept_group_id",
                    "concept",
                    "significance_score",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "thread_extracted_concept_group_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "concept": {
                        "type": "string"
                    },
                    "significance_score": {
                        "type": "number",
                        "format": "float"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ThreadExtractedConceptGroup": {
                "title": "Thread Extracted Concept Group",
                "required": [
                    "id",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "thread_extracted_concepts": {
                        "description": "A list of extracted concepts for this group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ThreadExtractedConcept"
                        }
                    }
                },
                "type": "object"
            },
            "ThreadSummary": {
                "title": "Thread Summary",
                "required": [
                    "id",
                    "thread_id",
                    "summary",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "thread_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "summary": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "thread": {
                        "$ref": "#/components/schemas/Thread"
                    }
                },
                "type": "object"
            },
            "UpdateThreadRequest": {
                "required": [
                    "question"
                ],
                "properties": {
                    "question": {
                        "description": "The question of the thread",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "User": {
                "required": [
                    "id",
                    "first_name",
                    "last_name",
                    "email",
                    "updated_at",
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier of the user",
                        "type": "integer"
                    },
                    "first_name": {
                        "description": "The first name of the user",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user",
                        "type": "string",
                        "format": "email"
                    },
                    "updated_at": {
                        "description": "The timestamp when the user was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "description": "The timestamp when the user was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "email_verified_at": {
                        "description": "The timestamp when the user's email was verified",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "http",
                "description": "Enter your Bearer token in the format **Bearer <token>**",
                "name": "Bearer",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Account",
            "description": "Account"
        },
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "Emotions",
            "description": "Emotions"
        },
        {
            "name": "Posts",
            "description": "Posts"
        },
        {
            "name": "Sentiments",
            "description": "Sentiments"
        },
        {
            "name": "Thread-analytics",
            "description": "Thread-analytics"
        },
        {
            "name": "Thread analytics",
            "description": "Thread analytics"
        },
        {
            "name": "Threads",
            "description": "Threads"
        },
        {
            "name": "Thread summaries",
            "description": "Thread summaries"
        }
    ]
}